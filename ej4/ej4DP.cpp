#include <iostream>
#include <vector>


using namespace std;

int minPosible;
vector<int> res;

/*
puestos = {1, 5, 15, 20}
proves = {-1, -1}

9
1 15


 2
puestos = 1 5 15 20

 PROVES=       0          1       2         3
        ---------------------------------------------------------------------------------------------------------------------------------------------------------
Puesto 1|0     0          4       14        19                                                               
        ---------------------------------------------------------------------------------------------------------------------------------------------------------
         1     4          0       10        15               
        -------------------------------------------------------------------------------------------------------------------------------------------------------- 
         2     14         10       0         5            
        --------------------------------------------------------------------------------------------------------------------------------------------------------  
         3     19         15       5         0    
*/

void construirMatriz(vector<vector<int>>& costoRespectoAProve, vector<int>& puestos){
    for (int i = 0; i < puestos.size(); i++)
    {
        for (int j = 0; j < puestos.size(); j++)
        {
            costoRespectoAProve[i][j] = abs(puestos[i] - puestos[j]);
        }
           
    }
}

void chori(vector<vector<int>>& costoRespectoAProve, vector<int>& puestos){
    
    construirMatriz(costoRespectoAProve, puestos);
    
    for(int i = 0; i < costoRespectoAProve.size(); i++) {
        for(int j = 0; j < costoRespectoAProve.size(); j++)
            cout << costoRespectoAProve[i][j];
        cout << endl;
    }
    
}

int main() {

    int test_cases_number;
    int cantPuestos;
    int cantProves;

    cin >> test_cases_number;

    for(int i = 0; i < test_cases_number; i++) {

        cin >> cantPuestos;
        cin >> cantProves;

        vector<int> puestos(cantPuestos);

        for(int i = 0; i < cantPuestos; i++) 
            cin >> puestos[i];
        
        vector<int> proves(cantProves, -1);

        // Inicializar una matriz de n*n para guardar el costo de un puesto respecto a donde hay proveeduria
        vector<vector<int>> costoRespectoAProve(cantPuestos,vector<int>(cantPuestos));

        minPosible = puestos[puestos.size() - 1];

        chori(costoRespectoAProve, puestos);

        cout << minPosible << endl;

        for(int i = 0; i < res.size(); i++) 
            cout << res[i] << " ";
        cout << endl;

    }

    return 0;
}

// {1, 2, 5}
// {0,0,0}
// ES UNA LEY PORQUE LO DIJO FACU. 
/*
3



puestos = {1, 5, 15, 20}
proves = {-1, -1}

9
1 15


 2
puestos = 1 5 15 20

 PROVES=       0          1       2         3
        ---------------------------------------------------------------------------------------------------------------------------------------------------------
Puesto 1|0     0          4       14        19                                                               
        ---------------------------------------------------------------------------------------------------------------------------------------------------------
         1     4          0       10        15               
        -------------------------------------------------------------------------------------------------------------------------------------------------------- 
         2     14         10       0         5            
        --------------------------------------------------------------------------------------------------------------------------------------------------------  
         3     19         15       5         0    




                        80
      1         2*       95      4       5*       6       7*     15           
                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------
1     0          1       2                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------
2     1          0       1                       
-------------------------------------------------------------------------------------------------------------------------------------------------------- 
3     2          1       0                     
--------------------------------------------------------------------------------------------------------------------------------------------------------  
4     3          2       1              1
--------------------------------------------------------------------------------------------------------------------------------------------------------
5     4          3       j              0
--------------------------------------------------------------------------------------------------------------------------------------------------------
6     5          4       3                1         
--------------------------------------------------------------------------------------------------------------------------------------------------------
7     6          5       4                                0
--------------------------------------------------------------------------------------------------------------------------------------------------------
8     7          6       5                                1
--------------------------------------------------------------------------------------------------------------------------------------------------------
15


*/
